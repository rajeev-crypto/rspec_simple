=begin
- In this chapter, we'll learn the basics of using RSpec. We'll write simple tests for a simple bit of Ruby code. Let's begin by getting our files organized. The first thing we're going to need if we're going to write RSpecs for some code, is the code that we want to write it for. So I've got a very simple project here, called car_project. You can open that up and see that there's just two files in it, init.rb and a directory called lib that has a file, car.rb in it. I'm going to actually open that whole folder up in TextMate so we can take a look at it there. Now, it doesn't matter where this project is located. It can be absolutely anywhere on your computer, as long as we can navigate there from the command line. So let's also do that. Let's go into our command line. You can see that I'm in my user directory right now, and I'm just going to navigate into my desktop and into that car_project. So that's where I am now. Now, I'm inside that car_project directory. And now when I issue commands to RSpec, it will be using that directory. That's where it'll be working from. All right, let's go back and actually take a look at the project. Init.rb is very simple. It requires that car.rb file that's in the lib directory. Then it outputs some text at the beginning: "Enter information for the car you want to purchase." It gets the make, the year, and the color from the user. And then, it creates a new car object using all of that, and then just simply outputs the text: "I understand that you want to purchase," car.full_name. So it calls this full_name method. If we take a look at the car class, you'll see it's a very simple class called car. It has attribute accessor for make, year, and color. It also has an attribute reader for wheels and an attribute writer for doors. And then, when we initialize it, which we did with new, then we can pass in the make, the year, and the color. And then, by default, it gets the number of wheels set for it. We have the method, full_name that we saw here. We also have a class method, called colors, that's there. So it's a very simple Ruby program, that, hopefully, will be very easy for you to understand. Let's just try running it real quick. So from inside that directory, if I just call Ruby init.rb, then hit return. Enter information for the car you want to purchase. I'm going to say, I want to purchase a Honda from 2011, color blue. I understand that you want to purchase a 2011 Honda, and then in parenthesis, blue. That's it. That's all it does. Very simple program. All right, so now we want to write test for this program. The first thing that we want to do is initialize the project for use with RSpec. And that's very easily done by just typing rspec, space, --, and then init. We'll hit return and it creates two files for us. A .rspec file, that's that configuration file for the project. And then it creates the spec_helper.rb inside a directory called spec. If we take a look back in our project, you can see that it created that for us. And the spec helper has some information in it that's all commented out, but it has some RSpec configuration. We want to go ahead and have that in there, right? So this gives us all the basics of working with RSpec. A lot of it's commented out. We'll talk a bit more about it later. So we have a spec helper, but we don't actually have a spec yet. We want to create a new spec and we want to put it in this spec directory. With TextMe, I can do that by hitting the button down here to create a new file. You can also do it from your operating system as well. And I'm going to call that file car_spec.rb. I'll create that file. Now notice, this car_spec.rb has a direct relationship to the code in our lib directory, car.rb. That's not a coincidence. There's a one to one mapping between the specs and the things that they test. So car_spec.rb is presumably the spec for car.rb. You'll want to keep with this convention to keep your files organized. Now, the very first thing you want to add to that car_spec.rb is that it needs to require "car," right? If we're going to run this spec, then it has to have access to that car class. That car class is necessary for us to start testing it. Once we have that we can save the file and we have our basic starting point. We have our test project, it's been initialized to work with RSpec, and we have our first spec file that's ready for us to fill out with our examples. In the next movie, we'll learn the basic syntax for how to write those examples. 
=end 

require 'car'